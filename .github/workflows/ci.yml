name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: |
            web-app/client/package-lock.json
            web-app/servers/package-lock.json

      - name: Install server deps
        working-directory: web-app/servers
        run: npm ci || npm install

      - name: Install client deps
        working-directory: web-app/client
        run: npm ci || npm install

      - name: Cache client build cache
        uses: actions/cache@v4
        with:
          path: web-app/client/node_modules/.cache
          key: ${{ runner.os }}-client-cache-${{ matrix.node-version }}-${{ hashFiles('web-app/client/package-lock.json') }}

      - name: Build client
        working-directory: web-app/client
        run: npm run build --if-present

      - name: Lint (if configured)
        working-directory: web-app/client
        run: npm run lint --if-present

    - name: Backend smoke test (health + inspectors)
        working-directory: web-app/servers
        env:
          DEV_FAKE_STORAGE: 'true'
          ALLOW_DEV_LOGIN: 'true'
          SKIP_FABRIC_ENROLL: 'true'
          SERVE_CLIENT: 'false'
          PORT: '8090'
        run: |
          node -v
          npm run start &
          PID=$!
          echo "Server PID: $PID"
          # wait for server to be ready
          for i in {1..20}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8090/health || true)
            if [ "$STATUS" = "200" ]; then echo "Health OK"; break; fi
            sleep 1
          done
      if [ "$STATUS" != "200" ]; then echo "Server failed to start"; kill $PID || true; exit 1; fi
      # Quick inspector checks
      DB_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8090/__db || true)
      DEV_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8090/__devdump || true)
      echo "/__db => $DB_STATUS, /__devdump => $DEV_STATUS"
      if [ "$DB_STATUS" != "200" ] || [ "$DEV_STATUS" != "200" ]; then echo "Inspector endpoints not healthy"; kill $PID || true; exit 1; fi
          kill $PID || true
